// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project01.EF;

#nullable disable

namespace Project01.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20220615075604_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Project01.Entity.Account", b =>
                {
                    b.Property<int>("ACC_Id")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("ACC_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ACC_Pw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PST_Id")
                        .HasColumnType("int");

                    b.HasKey("ACC_Id");

                    b.HasIndex("PST_Id");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.Admin", b =>
                {
                    b.Property<int>("AD_Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AD_Id"), 1L, 1);

                    b.Property<int>("ACC_Id")
                        .HasColumnType("int");

                    b.Property<string>("AD_Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("AD_Birth")
                        .HasColumnType("datetime2");

                    b.Property<string>("AD_Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AD_FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AD_LName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AD_Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("AD_Id");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.Class", b =>
                {
                    b.Property<int>("C_Id")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("C_Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("G_Id")
                        .HasColumnType("int");

                    b.Property<int>("SD_Id")
                        .HasColumnType("int");

                    b.Property<int>("SY_Id")
                        .HasColumnType("int");

                    b.HasKey("C_Id");

                    b.HasIndex("G_Id");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.Course", b =>
                {
                    b.Property<int>("CR_Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CR_Id"), 1L, 1);

                    b.Property<DateTime>("CR_EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CR_Link")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CR_Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CR_StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CR_Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("SJ_Id")
                        .HasColumnType("int");

                    b.HasKey("CR_Id");

                    b.HasIndex("SJ_Id");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.Document", b =>
                {
                    b.Property<int>("D_Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("D_Id"), 1L, 1);

                    b.Property<string>("D_Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SJ_Id")
                        .HasColumnType("int");

                    b.HasKey("D_Id");

                    b.HasIndex("SJ_Id");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.Grade", b =>
                {
                    b.Property<int>("G_Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("G_Id"), 1L, 1);

                    b.Property<string>("G_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("G_Id");

                    b.ToTable("Grade", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.Position", b =>
                {
                    b.Property<int>("PST_Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PST_Id"), 1L, 1);

                    b.Property<string>("PST_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PST_Id");

                    b.ToTable("Position", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.Schedule", b =>
                {
                    b.Property<int>("SD_Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SD_Id"), 1L, 1);

                    b.Property<int>("CR_Id")
                        .HasColumnType("int");

                    b.Property<int>("C_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("SD_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("SD_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SD_Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("SD_Id");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.ScheduleCourse", b =>
                {
                    b.Property<int>("SC_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SC_Id"), 1L, 1);

                    b.Property<int>("CR_Id")
                        .HasColumnType("int");

                    b.Property<int>("SD_Id")
                        .HasColumnType("int");

                    b.HasKey("SC_Id");

                    b.HasIndex("CR_Id");

                    b.HasIndex("SD_Id");

                    b.ToTable("ScheduleCourse", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.SchoolYear", b =>
                {
                    b.Property<int>("SY_Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SY_Id"), 1L, 1);

                    b.Property<int>("C_Id")
                        .HasColumnType("int");

                    b.Property<string>("SY_Year")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("SY_Id");

                    b.HasIndex("C_Id")
                        .IsUnique();

                    b.ToTable("SchoolYear", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.Semester", b =>
                {
                    b.Property<int>("SMT_Id")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("SMT_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SY_Id")
                        .HasColumnType("int");

                    b.HasKey("SMT_Id");

                    b.ToTable("Semester", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.Student", b =>
                {
                    b.Property<int>("S_Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("S_Id"), 1L, 1);

                    b.Property<int>("ACC_Id")
                        .HasColumnType("int");

                    b.Property<int>("C_Id")
                        .HasColumnType("int");

                    b.Property<string>("S_Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("S_Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("S_FName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("S_LName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("S_Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("S_Id");

                    b.HasIndex("C_Id");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.Subject", b =>
                {
                    b.Property<int>("SJ_Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SJ_Id"), 1L, 1);

                    b.Property<int>("AdminnAD_Id")
                        .HasColumnType("int");

                    b.Property<int>("SJ_Lesson")
                        .HasColumnType("int");

                    b.Property<string>("SJ_Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SemesterrSMT_Id")
                        .HasColumnType("int");

                    b.HasKey("SJ_Id");

                    b.HasIndex("AdminnAD_Id");

                    b.HasIndex("SemesterrSMT_Id");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.Test", b =>
                {
                    b.Property<int>("T_Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("T_Id"), 1L, 1);

                    b.Property<int>("SJ_Id")
                        .HasColumnType("int");

                    b.Property<int>("TC_Id")
                        .HasColumnType("int");

                    b.Property<string>("T_Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("T_Id");

                    b.HasIndex("SJ_Id");

                    b.HasIndex("TC_Id");

                    b.ToTable("Test", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.TestCategory", b =>
                {
                    b.Property<int>("TC_Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TC_Id"), 1L, 1);

                    b.Property<int>("TC_Name")
                        .HasMaxLength(1000)
                        .HasColumnType("int");

                    b.HasKey("TC_Id");

                    b.ToTable("TestCaterogy", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.TestDetail", b =>
                {
                    b.Property<int>("TD_Id")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<int>("C_Id")
                        .HasColumnType("int");

                    b.Property<int>("TD_Time")
                        .HasColumnType("int");

                    b.Property<DateTime>("T_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("T_Id")
                        .HasColumnType("int");

                    b.HasKey("TD_Id");

                    b.HasIndex("C_Id");

                    b.HasIndex("T_Id");

                    b.ToTable("TestDetail", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.TestPoint", b =>
                {
                    b.Property<int>("TP_Id")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<int>("SD_Id")
                        .HasColumnType("int");

                    b.Property<int>("TD_Id")
                        .HasColumnType("int");

                    b.Property<string>("TP_Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<float>("TP_Point")
                        .HasColumnType("real");

                    b.HasKey("TP_Id");

                    b.HasIndex("SD_Id");

                    b.ToTable("TestPoint", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.Transcript", b =>
                {
                    b.Property<int>("TS_Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TS_Id"), 1L, 1);

                    b.Property<int>("TP_Id")
                        .HasColumnType("int");

                    b.Property<string>("TS_Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<float>("TS_Point")
                        .HasColumnType("real");

                    b.Property<float>("TS_Total")
                        .HasColumnType("real");

                    b.HasKey("TS_Id");

                    b.ToTable("Transcript", (string)null);
                });

            modelBuilder.Entity("Project01.Entity.Account", b =>
                {
                    b.HasOne("Project01.Entity.Admin", "Admin")
                        .WithOne("Account")
                        .HasForeignKey("Project01.Entity.Account", "ACC_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project01.Entity.Student", "Student")
                        .WithOne("Accountt")
                        .HasForeignKey("Project01.Entity.Account", "ACC_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project01.Entity.Position", "Positionn")
                        .WithMany("Accountt")
                        .HasForeignKey("PST_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Positionn");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Project01.Entity.Class", b =>
                {
                    b.HasOne("Project01.Entity.Schedule", "Schedule")
                        .WithOne("Class")
                        .HasForeignKey("Project01.Entity.Class", "C_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project01.Entity.Grade", "Grade")
                        .WithMany("Class")
                        .HasForeignKey("G_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Project01.Entity.Course", b =>
                {
                    b.HasOne("Project01.Entity.Subject", "Subjectt")
                        .WithMany("Course")
                        .HasForeignKey("SJ_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subjectt");
                });

            modelBuilder.Entity("Project01.Entity.Document", b =>
                {
                    b.HasOne("Project01.Entity.Subject", "Subjectt")
                        .WithMany("Documents")
                        .HasForeignKey("SJ_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subjectt");
                });

            modelBuilder.Entity("Project01.Entity.ScheduleCourse", b =>
                {
                    b.HasOne("Project01.Entity.Course", "Courses")
                        .WithMany("ScheduleCourses")
                        .HasForeignKey("CR_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project01.Entity.Schedule", "Schedules")
                        .WithMany("ScheduleCourses")
                        .HasForeignKey("SD_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Courses");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Project01.Entity.SchoolYear", b =>
                {
                    b.HasOne("Project01.Entity.Class", "Class")
                        .WithOne("SchoolYear")
                        .HasForeignKey("Project01.Entity.SchoolYear", "C_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Project01.Entity.Semester", b =>
                {
                    b.HasOne("Project01.Entity.SchoolYear", "SchoolYears")
                        .WithMany("Semesters")
                        .HasForeignKey("SMT_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolYears");
                });

            modelBuilder.Entity("Project01.Entity.Student", b =>
                {
                    b.HasOne("Project01.Entity.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("C_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Project01.Entity.Subject", b =>
                {
                    b.HasOne("Project01.Entity.Admin", "Adminn")
                        .WithMany()
                        .HasForeignKey("AdminnAD_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project01.Entity.Semester", "Semesterr")
                        .WithMany()
                        .HasForeignKey("SemesterrSMT_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adminn");

                    b.Navigation("Semesterr");
                });

            modelBuilder.Entity("Project01.Entity.Test", b =>
                {
                    b.HasOne("Project01.Entity.Subject", "Subjectt")
                        .WithMany("Tests")
                        .HasForeignKey("SJ_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project01.Entity.TestCategory", "TestCategoryy")
                        .WithMany("Tests")
                        .HasForeignKey("TC_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subjectt");

                    b.Navigation("TestCategoryy");
                });

            modelBuilder.Entity("Project01.Entity.TestDetail", b =>
                {
                    b.HasOne("Project01.Entity.Class", "Class")
                        .WithMany("TestDetails")
                        .HasForeignKey("C_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project01.Entity.TestPoint", "TestPoints")
                        .WithOne("TestDetails")
                        .HasForeignKey("Project01.Entity.TestDetail", "TD_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project01.Entity.Test", "Test")
                        .WithMany("TestDetails")
                        .HasForeignKey("T_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Test");

                    b.Navigation("TestPoints");
                });

            modelBuilder.Entity("Project01.Entity.TestPoint", b =>
                {
                    b.HasOne("Project01.Entity.Student", "Students")
                        .WithMany("TestPoints")
                        .HasForeignKey("SD_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project01.Entity.Transcript", "Transcripts")
                        .WithMany("TestPoints")
                        .HasForeignKey("TP_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Students");

                    b.Navigation("Transcripts");
                });

            modelBuilder.Entity("Project01.Entity.Admin", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });

            modelBuilder.Entity("Project01.Entity.Class", b =>
                {
                    b.Navigation("SchoolYear")
                        .IsRequired();

                    b.Navigation("Students");

                    b.Navigation("TestDetails");
                });

            modelBuilder.Entity("Project01.Entity.Course", b =>
                {
                    b.Navigation("ScheduleCourses");
                });

            modelBuilder.Entity("Project01.Entity.Grade", b =>
                {
                    b.Navigation("Class");
                });

            modelBuilder.Entity("Project01.Entity.Position", b =>
                {
                    b.Navigation("Accountt");
                });

            modelBuilder.Entity("Project01.Entity.Schedule", b =>
                {
                    b.Navigation("Class")
                        .IsRequired();

                    b.Navigation("ScheduleCourses");
                });

            modelBuilder.Entity("Project01.Entity.SchoolYear", b =>
                {
                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("Project01.Entity.Student", b =>
                {
                    b.Navigation("Accountt")
                        .IsRequired();

                    b.Navigation("TestPoints");
                });

            modelBuilder.Entity("Project01.Entity.Subject", b =>
                {
                    b.Navigation("Course");

                    b.Navigation("Documents");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Project01.Entity.Test", b =>
                {
                    b.Navigation("TestDetails");
                });

            modelBuilder.Entity("Project01.Entity.TestCategory", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Project01.Entity.TestPoint", b =>
                {
                    b.Navigation("TestDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("Project01.Entity.Transcript", b =>
                {
                    b.Navigation("TestPoints");
                });
#pragma warning restore 612, 618
        }
    }
}
